swagger: '2.0'
info:
  description: This is Mark Pfaff's Rest API for AD420.
  version: 1.0.0
  title: Rest API AD420
  termsOfService: 'http://markpfaff.com/'
  contact:
    email: markdpfaff@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: ad420.example.com
basePath: /v2
tags:
  - name: user
    description: Everything about your users
    externalDocs:
      description: Find out more
      url: 'http://markpfaff.com'
  - name: task
    description: Tasks for your users
schemes:
  - http
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new user
      description: ''
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Success!
        '405':
          description: Invalid input
    get:
      tags:
        - user
      summary: Gets all users by name
      description: ''
      operationId: findUserByName
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Invalid username
  '/users/{userid}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: ''
      operationId: readUserByID
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: ''
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
        '405':
          description: Invalid input
    put:
      tags:
        - user
      summary: Update user
      description: ''
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: User ID
          required: true
          type: integer
          format: int64
        - in: body
          name: user
          description: name that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
        '404':
          description: ''
        '405':
          description: ''
    delete:
      tags:
        - user
      summary: Deletes a user
      description: ''
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: User id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
        '404':
          description: ''
  '/users/{userid}/tasks':
    get:
      tags:
        - task
      summary: Find user task by ID
      description: Returns a single task
      operationId: getTaskById
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: ID of user to get tasks
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: User Task not found
    post:
      tags:
        - task
      summary: Updates a user task by user id
      description: ''
      operationId: updateUserTaskWithID
      consumes:
        - application/json
      parameters:
        - in: path
          name: userid
          description: User ID
          required: true
          type: integer
          format: int32
        - in: body
          name: tasks
          description: Task that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: Success!
        '404':
          description: User id not found
        '405':
          description: Invalid input
  '/users/{userid}/tasks/{taskid}':
    get:
      tags:
        - task
      summary: Find task by user and task IDs
      description: ''
      operationId: getTaskByUserTaskId
      produces:
        - application/json
      parameters:
        - name: taskid
          in: path
          description: ID of task that needs to be fetched
          required: true
          type: integer
          format: int64
        - name: userid
          in: path
          description: ID of user that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: A Task object
          schema:
            items:
              $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
    put:
      tags:
        - task
      summary: Update task by user id and task id
      description: ''
      operationId: updateTaskByUserID
      produces:
        - application/json
      parameters:
        - in: path
          name: userid
          description: User ID
          required: true
          type: integer
          format: int34
        - in: path
          name: taskid
          description: Task ID
          required: true
          type: integer
          format: int34
        - in: body
          name: task
          description: task that need to be updated
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
        '400':
          description: ''
        '404':
          description: ''
    delete:
      tags:
        - task
      summary: Delete task  by ID
      description: ''
      operationId: deleteTaskByUserID
      produces:
        - application/json
      parameters:
        - name: taskid
          in: path
          description: ID of the task that needs to be deleted
          required: true
          type: integer
          format: int64
        - name: userid
          in: path
          description: ID of the user of the task that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
        '404':
          description: ''
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      tasks:
        type: array
        items:
          type: integer
          format: int32
    xml:
      name: User
  Task:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      status:
        type: string
    xml:
      name: Task
